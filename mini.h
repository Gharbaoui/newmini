int	ft_export(char **args, t_fullvar **vars);
void	update_pwd(t_envs **exenvs)
int	_echo(char **args)
int	pwd(void)
char	**transfrm_ln_arr(t_words *words, char *cmd, int iscmd)
int	fill_onepipcmd(t_pipcommand *pipcmd, t_pipcmd *pip, t_envs **exenvs)
int	fill_one_cmd(t_onecmd *fcmd, t_cmd *pcmd, t_envs **exenvs)
int	how_many_words(t_words *words)
t_pipcommand	*get_cmd_struct(t_pipcmd *cmd, t_envs **exenvs)
int	run_sim_cmd(t_onecmd cmd, t_fullvar **env_var)
int	handl_red(t_onecmd cmd)
int	actual_exec_one(t_onecmd cmd)
int	exc_one_built(t_onecmd cmd, t_fullvar **env_var)
int	builtin(char *cmd, char *origin)
void	help_prem_check(char *cmd, int *ret)
char	**creat_w_files(char **files, char **ops, int *error, int *append)
int	close_in_parent(int **pipe, int pindex)
int	prm_check(t_onecmd cmd)
int	decide_in_out(int **pipe, char **files, char **ops, t_iter nums)
void	update_exit_status(t_envs **exenvs)
void	overwrite_or_append(int append, char **fs)
int	fullexcute(t_completecmd **complete, t_fullvar **variables)
int	excute_one_cmd (t_pipcommand *pcmd, t_fullvar **variables)
int	run_exact_cmd(t_onecmd cmd, t_fullvar **env_var)
int	expand_full_pipcmd(t_pipcmd **pipcmd, t_envs **exenvs)
int	expand_one_cmdstrct(t_cmd **cmd, t_envs **exenvs)
int	get_var_name(char *line, char **key)
int	mk_and_add_to_words(t_words **words, char *line)
t_pipcommand	*expand_current_command(t_completecmd *cucmd, t_fullvar *envs)
void	export_print(t_fullvar *vars)
char	*get_key(char *line)
int	sub_export(t_fullvar **vars, char *line)
int	check_exvar(char *line)
void	real_work_sort(t_words **words)
void	split_words(t_words *words, t_words **a, t_words **b)
void	fill_rest(t_words **fin, t_words *w)
int	sort_words(t_words **words)
t_words	*sortd_merg(t_words *w1, t_words *w2)
int	filter_complete(t_completecmd **completecmd)
int	filter_pipcmd1(t_pipcmd **pipcmd)
int	filter_cmd(t_cmd **cmd)
int	modify_str(char **str)
int	addtowords(t_words **words, char *str, int start, int end)
char	*get_command(char *cmd, char *PATH, int *prem, char *lcmd)
char	*get_using_path(char *cmd, char *PATH, struct stat *fst)
char	*get_one_path(char *PATH, int *index)
int	is_comcmd(char *cmd, char *lcmd)
int	is_excutable(struct stat fst)
int	ft_env (t_fullvar *vars)
void	help_ft_exit(int status, char **args)
int	ft_exit(char **args)
int	fill_envtable(t_fullvar **fullvar, char **env)
int	add_toenvtable(t_fullvar **vars, char *line)
int	ft_exist(t_words *words, char *str)
int	check_envvar(char *line, int eq_pos)
t_envs	*make_node_env(int *ern, char *line, t_fullvar **vars)
void	ctrl_return(void)
void	key_erase(void)
void	key_enter(t_completecmd **complete, t_fullvar **variables, char **cur)
int	key_down(char *cur)
int	h1_key_down(char *cur)
void	history_loop(t_completecmd **complete, t_fullvar **variables,
void	h1_history_loop(char **cur, int d, char *c)
void	key_enter2(void)
void	ctrl_d(void)
int	key_up(void)
int	fill_cmdstruct(t_words *words, t_cmd **command)
int	h1_fill_cmdstruct(t_words **words, t_cmd **command, char *firstword)
int	h2_fill_cmdstruct(t_words **words,
void	free_env(t_envs ***envtable)
void	free_envlist(t_envs **envlist)
void	free_one_env(t_envs **oneenv)
int	rest_envt(t_envs ***envtable)
int	hash_env_name(char *env_name)
void	free_dstr(char **str)
int	istxt(char c)
int	opvalid(char *str)
int	ft_cmpstr(char *s1, char *s2)
int	is_special(char c)
void	free_wcmd(t_workingcmds **wcmd, int numofcmds)
void	free_words(t_words **words)
void	free_cmdstr(t_cmd **cmd)
void	free_pipcmd(t_pipcmd **pipcmd)
void	free_comp(t_completecmd **cmp)
void	free_env_node(t_envs *n)
int	delete_env(t_envs ***table, char *env_name, int *founded)
int	delete_exactfromln(t_envs **list, char *key, int *found)
int	add_node_to(t_envs **head, t_envs **current)
t_envs	*look_inln(int *found, char *env_name, t_envs *lnenv)
void	free_laststr(t_pipcommand **pcmd)
void	free_pipes(int **pipes, int count)
void	free_onecmd(t_onecmd *cmd)
char	*ft_strdup(char *str)
int	reset_command(t_cmd **command)
int	splitby(char *str, int *index)
int	valditadsq(char *str)
int	validchracter(char c)
int	ft_isalpha(char c)
int	ft_isdigit(char c)
int	add_to_words_str(t_words **hidden_var, char *line)
t_envs	*get_env(int *found, char *env_name, t_envs **table)
int	backslash(char *line, int index)
int	check_errors(int ern, t_words **words)
int	simplecheck(char *line)
int	fill_cmd_objs(t_words **txts, char *str)
int	h1_fill_cmd_objs(t_words **txts, char *str)
char	*get_line_from_words_with_spaces(t_words *words)
char	*get_quot_word(char *str, int *index)
int	get_len_double_qout(char *str, t_envs **exenvs)
int	get_len_ofstrs_in_words(t_words *words)
t_words	*split_by_qout(char *str)
void	help_short_count(char *help, int *i)
int	calcfirst(char *line, char c, int *last, int *is_str)
int	h1_calcfirst(int i)
int	help_short_calcfirst(int *i, int *dq, int *sq, int is_first)
int	countnumberofcmds(t_words *commands)
char	*double_qout_part(char *str, t_envs **exenvs)
int	fill_part_of_str(char *tmp, int *index, char *str, t_envs **exenvs)
int	fill_words(t_words **words, char *str)
int	h1_fill_words(t_words **words, char *str, int *index, int help)
void	rest(t_workingcmds **wcmd, t_words **commands)
void	rest_txt_next(char **str, t_words **next)
int	check_newlines(char *line)
int	h1_check_newlines(char **line, char *backup, int *i)
int	is_empty(char *line)
